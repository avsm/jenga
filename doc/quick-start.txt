
Jenga quick-start guide.

Jenga is a general purpose build system in the mold of make.

The jenga executable is used to run commands which build generated
files from source files, based on a rules written in JengaRoot.ml

A single jenga instance will perform the build for an entire directory
tree of files.

The root of the directory tree is marked by the location of the single
JengaRoot.ml file. When jenga is run it will look for the JengaRoot.ml
starting in the currently directory, and then searching upwards though
the parent directories.  (This allows jenga to be started in any sub
directory of the full tree; useful when combined with the idea of a
per-directory .DEFAULT target.)


The JengaRoot.ml should provide a definition for the single function:

  val setup : unit -> Env.t

This should be coded using functions provided by the jenga API. See:

    lib/Api.mli

The API types are build on top of the Core & Async libraries, and so
JengaRoot.ml will commonly start:

    open Core.Std
    open Async.Std
    open Jenga_lib.Api


Here follows a brief description of the main types provided by the
API, and which will be constructed by every jengaRoot.ml


  A rule is the standard triple of targets/dependencies/action. The
  action describes the command (prog+args) to run when the targets
  become out of date w.r.t. the dependencies. Actions are explicit
  about the directory in which to run the command.

  An alias rule allows a symbolic name for a set of dependencies.  As
  a special case the symbolic name ".DEFAULT" is used as the default
  targets to build when jenga is run as the commands line without
  specific targets being requested (this is the normal use case).

  A rule generator is a function (from unit) which generates rules; it
  may have its own dependencies. The generator function may contain
  arbitrary Async code.

  A scheme is a function (from dir:Path.t) which constructs a
  generator for a given directory; A scheme is tagged with a name.

  A setup is a finite mapping between filename-(glob)patterns and
  (optional) schemes. An option-scheme of None is the same as a scheme
  which generates no rules, and is useful to declare that a specific
  filename(pattern) is expected to be be a source file.


To run jenga...

Find the jenga executable in the bin sudirectory: jenga-standalone.exe
(in the following this is executable is called "jenga")

Run in a directory-tree containing a JengaRoot.ml
Some options you might find useful. (See "jenga -help".)

  $ jenga -P -j 12 -rr

    -P          run in polling mode
    -j <num>    run upto <num> external jobs in parallel
    -rr         "run-reason"; show when a command is run, and why.
    

When jenga is running in polling mode: After the build is complete
(successfully or with errors), jenga will be sensitive to any changes
to files which should cause rebuilding. These files will be shown if
jenga is started: "jenga -S"


When jenga is not running in polling mode, but is restarted after a
previous run, changes to files are detected via a persistent file
".jenga.db" stored in the root of the jenga-tree. This file records
what commands were run to create which targets, together with the
(digest) state of those targets & dependencies.

Jenga has the same behaviour when run in polling or non-polling mode.
Use of polling mode is simply a convenience; and which avoids the
start-up cost when running jenga in a large tree.



Examples...
  
examples/hello/

  Example of a small fixed set of rules to build a hello-world program
  (split across two .ml files and one .mli)

examples/compile-and-link/

  Using jenga to programmatically setup compile & link rules for all
  source files found in a directory.
