# OASIS_START
# DO NOT EDIT (digest: a56835326f7e2b89e7866a3a64fe04bc)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library jenga_lib
"lib/jenga_lib.cmxs": use_jenga_lib
"lib/api.cmx": for-pack(Jenga_lib)
"lib/build.cmx": for-pack(Jenga_lib)
"lib/command_line.cmx": for-pack(Jenga_lib)
"lib/config.cmx": for-pack(Jenga_lib)
"lib/description.cmx": for-pack(Jenga_lib)
"lib/discovered_graph.cmx": for-pack(Jenga_lib)
"lib/dot.cmx": for-pack(Jenga_lib)
"lib/effort.cmx": for-pack(Jenga_lib)
"lib/for_user.cmx": for-pack(Jenga_lib)
"lib/fs.cmx": for-pack(Jenga_lib)
"lib/glob_to_re.cmx": for-pack(Jenga_lib)
"lib/heart.cmx": for-pack(Jenga_lib)
"lib/jenga_progress.cmx": for-pack(Jenga_lib)
"lib/jenga_root_interface.cmx": for-pack(Jenga_lib)
"lib/job_scheduler.cmx": for-pack(Jenga_lib)
"lib/load_root.cmx": for-pack(Jenga_lib)
"lib/message.cmx": for-pack(Jenga_lib)
"lib/monomorphic_mutable_graph.cmx": for-pack(Jenga_lib)
"lib/path.cmx": for-pack(Jenga_lib)
"lib/pattern.cmx": for-pack(Jenga_lib)
"lib/persist.cmx": for-pack(Jenga_lib)
"lib/rpc_intf.cmx": for-pack(Jenga_lib)
"lib/rpc_server.cmx": for-pack(Jenga_lib)
"lib/repo_root.cmx": for-pack(Jenga_lib)
"lib/run.cmx": for-pack(Jenga_lib)
"lib/server_lock.cmx": for-pack(Jenga_lib)
"lib/tenacious.cmx": for-pack(Jenga_lib)
<lib/*.ml{,i}>: pkg_threads
<lib/*.ml{,i}>: pkg_async
<lib/*.ml{,i}>: pkg_async_inotify
<lib/*.ml{,i}>: pkg_async_shell
<lib/*.ml{,i}>: pkg_bin_prot
<lib/*.ml{,i}>: pkg_bin_prot.syntax
<lib/*.ml{,i}>: pkg_comparelib
<lib/*.ml{,i}>: pkg_comparelib.syntax
<lib/*.ml{,i}>: pkg_core
<lib/*.ml{,i}>: pkg_core_extended
<lib/*.ml{,i}>: pkg_fieldslib
<lib/*.ml{,i}>: pkg_fieldslib.syntax
<lib/*.ml{,i}>: pkg_ocaml_plugin
<lib/*.ml{,i}>: pkg_pcre
<lib/*.ml{,i}>: pkg_sexplib
<lib/*.ml{,i}>: pkg_sexplib.syntax
# Executable jenga
<bin/jenga.{native,byte}>: use_jenga_lib
<bin/jenga.{native,byte}>: pkg_threads
<bin/jenga.{native,byte}>: pkg_async
<bin/jenga.{native,byte}>: pkg_async_inotify
<bin/jenga.{native,byte}>: pkg_async_shell
<bin/jenga.{native,byte}>: pkg_bin_prot
<bin/jenga.{native,byte}>: pkg_bin_prot.syntax
<bin/jenga.{native,byte}>: pkg_comparelib
<bin/jenga.{native,byte}>: pkg_comparelib.syntax
<bin/jenga.{native,byte}>: pkg_core
<bin/jenga.{native,byte}>: pkg_core_extended
<bin/jenga.{native,byte}>: pkg_fieldslib
<bin/jenga.{native,byte}>: pkg_fieldslib.syntax
<bin/jenga.{native,byte}>: pkg_ocaml_plugin
<bin/jenga.{native,byte}>: pkg_pcre
<bin/jenga.{native,byte}>: pkg_sexplib
<bin/jenga.{native,byte}>: pkg_sexplib.syntax
# Executable jenga-progress
<bin/jenga_progress.{native,byte}>: use_jenga_lib
<bin/jenga_progress.{native,byte}>: pkg_threads
<bin/jenga_progress.{native,byte}>: pkg_async
<bin/jenga_progress.{native,byte}>: pkg_async_inotify
<bin/jenga_progress.{native,byte}>: pkg_async_shell
<bin/jenga_progress.{native,byte}>: pkg_bin_prot
<bin/jenga_progress.{native,byte}>: pkg_bin_prot.syntax
<bin/jenga_progress.{native,byte}>: pkg_comparelib
<bin/jenga_progress.{native,byte}>: pkg_comparelib.syntax
<bin/jenga_progress.{native,byte}>: pkg_core
<bin/jenga_progress.{native,byte}>: pkg_core_extended
<bin/jenga_progress.{native,byte}>: pkg_fieldslib
<bin/jenga_progress.{native,byte}>: pkg_fieldslib.syntax
<bin/jenga_progress.{native,byte}>: pkg_ocaml_plugin
<bin/jenga_progress.{native,byte}>: pkg_pcre
<bin/jenga_progress.{native,byte}>: pkg_sexplib
<bin/jenga_progress.{native,byte}>: pkg_sexplib.syntax
<bin/*.ml{,i}>: use_jenga_lib
<bin/*.ml{,i}>: pkg_threads
<bin/*.ml{,i}>: pkg_async
<bin/*.ml{,i}>: pkg_async_inotify
<bin/*.ml{,i}>: pkg_async_shell
<bin/*.ml{,i}>: pkg_bin_prot
<bin/*.ml{,i}>: pkg_bin_prot.syntax
<bin/*.ml{,i}>: pkg_comparelib
<bin/*.ml{,i}>: pkg_comparelib.syntax
<bin/*.ml{,i}>: pkg_core
<bin/*.ml{,i}>: pkg_core_extended
<bin/*.ml{,i}>: pkg_fieldslib
<bin/*.ml{,i}>: pkg_fieldslib.syntax
<bin/*.ml{,i}>: pkg_ocaml_plugin
<bin/*.ml{,i}>: pkg_pcre
<bin/*.ml{,i}>: pkg_sexplib
<bin/*.ml{,i}>: pkg_sexplib.syntax
# OASIS_STOP
<lib/*.ml{,i}>: syntax_camlp4o
